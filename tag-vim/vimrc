"========================================================="
"                                                         "
"                    Vim Configuration                    "
"                                                         "
"                  Author: David Hagerty                  "
"                     Copyright 2020                      "
"                                                         "
"       My configuration for Vim, lovingly crafted.       "
"              Made for ease of use in macOS.             "
"                    Copy as you wish.                    "
"                But credit is appreciated.               "
"                                                         "
"========================================================="

"==============="
"  Keybindings  "
"==============="

" Set the Leader key to the spacebar
let mapleader = "\<Space>"

" Open this file for editing anywhere you are
nmap <leader>vr :sp $MYVIMRC<CR>

" Reload this configuration
nmap <leader>so :source $MYVIMRC<CR>

" Search without highlighting
nmap <leader>h :nohlsearch<CR>

" Jump forwards by paragraph. Jumps to the beginning then the end of 'paragraph'-type structures
nnoremap <expr> { len(getline(line('.')-1)) > 0 ? '{+' : '{-'

" Jump backwards by paragraph. Reverse of the above mapping
nnoremap <expr> } len(getline(line('.')+1)) > 0 ? '}-' : '}+'

" Disable arrow keys to encourage Vim's own movement paradigms
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

"==================="
"  Vundle Settings  "
"==================="

" Enable Vundle
set rtp+=~/.vim/bundle/Vundle.vim

" List plugins to manage
call vundle#begin()
  " Let Vundle manage itself
  Plugin 'gmarik/Vundle.vim'
  
  " Better Ruby support in Vim
  Plugin 'vim-ruby/vim-ruby'
  
  " The best git wrapper, period.
  Plugin 'tpope/vim-fugitive'
  
  " Easily handle comments
  Plugin 'tpope/vim-commentary'
  
  " Makes Rails and Vim best friends
  Plugin 'tpope/vim-rails'
  
  " Makes working with brackets, quotes, tags, etc easier
  Plugin 'tpope/vim-surround'
  
  " The secret sauce to make netrw better
  Plugin 'tpope/vim-vinegar'
  
  " Work with words better
  Plugin 'tpope/vim-abolish'
  
  " Better repeating support
  Plugin 'tpope/vim-repeat'
  
  " Haml support
  Plugin 'tpope/vim-haml'
  
  " Basic rbenv support
  Plugin 'tpope/vim-rbenv'
  
  " Bundler integration
  Plugin 'tpope/vim-bundler'
  
  " Support for auto-completing if/endif do/end type structures
  Plugin 'tpope/vim-endwise'
  
  " Add git diff information to the gutter
  Plugin 'airblade/vim-gitgutter'

  " Add syntax checking
  Plugin 'dense-analysis/ale'

  " Add async build capabilities
  Plugin 'neomake/neomake'

  " Add new and better text targets for normal mode
  Plugin 'wellle/targets.vim'

  " Add a tagbar to browse tags
  Plugin 'majutsushi/tagbar'

  " Fuzzy picker for everything
  Plugin 'srstevenson/vim-picker'

  " Ease writing of XML/HTML by auto-closing tags
  Plugin 'vim-scripts/closetag.vim'

  " Auto-close parens, brackets, and braces
  Plugin 'jiangmiao/auto-pairs'

  " JSONnet support
  Plugin 'google/vim-jsonnet'

  " Good file finding
  Plugin 'wincent/command-t'

  " Set up a cool-looking statusline
  Plugin 'itchyny/lightline.vim'

  " Add ALE to lightline
  Plugin 'maximbaz/lightline-ale'

  " Add fzf-style finding to vim
  Plugin 'junegunn/fzf.vim'

  " Add editorconfig support to vim
  Plugin 'editorconfig/editorconfig-vim'

  " Nord theme
  Plugin 'arcticicestudio/nord-vim'
call vundle#end()

"==========="
"  General  "
"==========="

" Set the local encoding to UTF-8 and ignore any BOMs
set encoding=utf-8 nobomb

" Turn on filetype detection, and turn on filetype-based settings and indentation rules
filetype plugin indent on

" Enable syntax highlighting
syntax on

set termguicolors
set background=dark
colorscheme nord
let g:nord_uniform_diff_background = 1
let g:nord_bold_vertical_split_line = 1

" Always show the status bar
set laststatus=2

" Allow backspaces to wrap over indents, line breaks, and the start of Insert mode
set backspace=indent,eol,start

" Enable better command-line completion
set wildmenu

" Turn on wrapping lines (default is on, but this is to show I want this behavior)
set wrap

" Wrap lines at words, not characters
set linebreak

" Turn on spell checking for Git commit messages
autocmd Filetype gitcommit setlocal spell textwidth=72

" Enable mouse input for normal and visual modes
set mouse=nv

"=========="
"  Search  "
"=========="

" Case-insensitive search, unless we use capital letters
set ignorecase
set smartcase

" Incrementally search
set incsearch

" Highlight search results
set hlsearch

"=========================="
"  Tab and Space Settings  "
"=========================="

" Set tab to two spaces
set tabstop=2

" An indent is the same width as tab
set shiftwidth=2

" Expand tab characters into space characters
set expandtab

" Automatically indent blocks
set smartindent

"======================"
"  Performance Tuning  "
"======================"

" Indicate a fast terminal connection
set ttyfast

" Limit the scrolling speed
if !has('nvim')
  set ttyscroll=3
endif

" Don't redraw while executing macros
set lazyredraw

"=========="
"  Cursor  "
"=========="

" Highlight the current line the cursor is on
set cursorline

" Highlight the current column the cursor is in
set cursorcolumn

" Highlight the column after <textwidth> (default is 80 characters)
set colorcolumn=+1

"=================="
"  Line Numbering  "
"==================" 

" Turn on line numbering relative to the current line (default)
set relativenumber

"============"
"  Autocmds  "
"============"

augroup cursor_cmds
  autocmd!
  " When the window is no longer active, do not highlight the cursor line
  autocmd WinLeave * setlocal nocursorline

  " When the window is no longer active, do not highlight the cursor column
  autocmd WinLeave * setlocal nocursorcolumn

  " Set absolute line numbers while in Insert mode
  autocmd InsertEnter * :set number

  " Return to relative numbers outside of Insert mode
  autocmd InsertLeave * :set relativenumber

  " Turn on spell checking for Git commit messages
  autocmd Filetype gitcommit setlocal spell textwidth=72

  " Run gofmt on save
augroup END

"==========================="
"  Lightline Configuration  "
"==========================="

set noshowmode

let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ], [ 'linter_checking', 'linter_warnings', 'linter_errors' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
    \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \ }

let g:lightline#ale#indicator_checking = "\u25cc"
let g:lightline#ale#indicator_warnings = "\u2691"
let g:lightline#ale#indicator_errors = "\u2716"

"==========================="
"  Plugin Related Settings  "
"==========================="

" Add fzf to the runtime path
set rtp+=/usr/local/opt/fzf

" ALE Settings
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
" Don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
let g:ale_sign_error = "\u2716"
let g:ale_sign_warning = "\u2691"
let g:ale_linters = {'go': ['gopls']}
let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'go': ['gofmt', 'goimports']
\}
let g:ale_fix_on_save = 1

" If for some reason I use netrw instead of command-t
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25

" Toggle the tagbar...
nmap <leader>b :TagbarToggle<CR>

" Fugitive doesn't set tag location anymore, so now it needs to be a manual process
set tags^=./.git/tags

" Don't load editorconfig for fugitive and files loaded over SSH
let g:EditorConfig_exclude_patterns = ['fugitive://.\*', 'scp://.\*']

" Use rg instead of ag with fzf.vim
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

